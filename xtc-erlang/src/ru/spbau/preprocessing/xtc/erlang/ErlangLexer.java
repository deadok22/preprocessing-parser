/* The following code was generated by JFlex 1.5.1 */




package ru.spbau.preprocessing.xtc.erlang;

import xtc.tree.Location;

import xtc.lang.cpp.Syntax.Language;
import xtc.lang.cpp.Syntax.PreprocessorTag;
import xtc.lang.cpp.Syntax.Text;
import xtc.lang.cpp.Syntax.Layout;
import xtc.lang.cpp.Syntax.EOF;
import xtc.lang.cpp.Syntax;

import static ru.spbau.preprocessing.xtc.erlang.ErlangTag.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.5.1
 * from the specification file <tt>erlang.l.flex</tt>
 */
public class ErlangLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\1\1\10\0\1\1\1\4\2\0\1\3\21\0\1\1\1\1\1\67"+
    "\1\23\1\10\1\42\1\2\1\0\1\34\1\70\1\71\1\62\1\61"+
    "\1\44\1\15\1\16\1\63\10\20\2\7\1\56\1\73\1\60\1\43"+
    "\1\57\1\74\1\21\4\11\1\13\1\11\24\5\1\35\1\17\1\37"+
    "\1\22\1\45\1\41\1\46\1\24\1\12\1\25\1\14\1\26\1\51"+
    "\1\50\1\52\2\6\1\66\1\64\1\27\1\53\2\6\1\30\1\31"+
    "\1\32\1\54\1\33\1\47\1\65\1\55\1\6\1\36\1\72\1\40"+
    "\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\2\1\1\2\1\3\1\4\1\5\2\3\1\6"+
    "\1\7\1\0\6\3\1\0\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\4\3\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\3\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\4\2\0\2\3\1\33\1\34\1\35\1\0"+
    "\1\36\13\3\1\0\1\3\2\14\1\37\1\0\1\40"+
    "\1\41\1\0\3\3\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\3"+
    "\1\56\2\4\1\57\2\3\1\60\1\61\2\3\1\62"+
    "\1\63\1\3\1\64\1\3\1\65\1\66\1\67\1\3"+
    "\1\70\1\71\1\0\1\14\1\0\1\72\1\73\1\3"+
    "\1\74\2\3\1\75\1\0\1\76\2\3\1\77\1\100"+
    "\1\101\1\3\1\14\2\3\1\102\1\3\1\57\1\0"+
    "\1\103\1\104\1\3\1\105\4\3\1\106\1\107\1\110";

  private static int [] zzUnpackAction() {
    int [] result = new int[146];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\75\0\172\0\267\0\364\0\u0131\0\u016e\0\u01ab"+
    "\0\u01e8\0\u0225\0\u0262\0\u029f\0\u02dc\0\u0319\0\u0356\0\u0393"+
    "\0\u03d0\0\u040d\0\u044a\0\u016e\0\u016e\0\u016e\0\u016e\0\u0487"+
    "\0\u04c4\0\u016e\0\u0501\0\u053e\0\u057b\0\u05b8\0\u05f5\0\u0632"+
    "\0\u066f\0\u06ac\0\u016e\0\u06e9\0\u0726\0\u016e\0\u016e\0\u016e"+
    "\0\u0763\0\u016e\0\u016e\0\u07a0\0\u07dd\0\u081a\0\u0857\0\u0894"+
    "\0\u016e\0\u016e\0\u08d1\0\u090e\0\u016e\0\u094b\0\u0988\0\u09c5"+
    "\0\u0a02\0\u0a3f\0\u0a7c\0\u0ab9\0\u0af6\0\u0b33\0\u0b70\0\u0bad"+
    "\0\u0bea\0\u016e\0\u016e\0\u0c27\0\u016e\0\u0c64\0\u016e\0\u016e"+
    "\0\u0ca1\0\u0cde\0\u0d1b\0\u0d58\0\364\0\364\0\u0d95\0\u016e"+
    "\0\u016e\0\u016e\0\u016e\0\u016e\0\u016e\0\u016e\0\u016e\0\u016e"+
    "\0\u0dd2\0\u016e\0\u0e0f\0\u07dd\0\u0e4c\0\u0e89\0\u0ec6\0\364"+
    "\0\u016e\0\u0f03\0\u0f40\0\364\0\364\0\u0f7d\0\364\0\u0fba"+
    "\0\364\0\364\0\364\0\u0ff7\0\364\0\364\0\u1034\0\u1071"+
    "\0\u10ae\0\u016e\0\u016e\0\u10eb\0\u1128\0\u1165\0\u11a2\0\364"+
    "\0\u11df\0\364\0\u121c\0\u1259\0\364\0\364\0\364\0\u1296"+
    "\0\u12d3\0\u1310\0\u134d\0\364\0\u138a\0\u13c7\0\u13c7\0\364"+
    "\0\364\0\u1404\0\364\0\u1441\0\u147e\0\u14bb\0\u14f8\0\364"+
    "\0\364\0\364";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[146];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int ZZ_TRANS [] = {
    -1, 1, 2, -1, 1, 3, 4, 5, 6, 3, 
    7, 3, 8, 9, 10, -1, 5, -1, -1, 11, 
    12, 13, 14, 15, 16, 4, 17, 4, 18, 19, 
    20, 21, 22, -1, 23, 24, 25, 3, 26, 27, 
    4, 4, 28, 29, 4, 4, 30, 31, 32, 33, 
    34, 35, 4, 36, 4, 37, 38, 39, 40, 41, 
    42, -1, 1, -1, -1, 1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, 2, 2, 2, -1, -1, 2, 2, 2, 
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
    2, 2, 2, -1, -1, -1, -1, -1, 3, 3, 
    3, -1, 3, 3, 3, 3, -1, -1, -1, 3, 
    3, -1, -1, 3, 3, 3, 3, 3, 3, 3, 
    3, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, -1, 
    -1, -1, -1, -1, -1, 3, 3, 3, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    4, 4, -1, 4, 4, 4, 4, -1, -1, -1, 
    4, 4, -1, -1, 4, 4, 4, 4, 4, 4, 
    4, 4, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    -1, -1, -1, -1, -1, -1, 4, 4, 4, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, 43, 44, -1, -1, -1, -1, -1, 45, 
    -1, 43, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, 4, 4, 4, -1, 4, 4, 4, 4, 
    -1, -1, -1, 4, 4, -1, -1, 4, 4, 4, 
    4, 4, 4, 4, 4, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, 4, 46, 4, 4, 4, 4, 
    4, 4, 4, -1, -1, -1, -1, -1, -1, 4, 
    4, 4, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, 4, 4, 4, -1, 4, 4, 4, 
    4, -1, -1, -1, 4, 4, -1, -1, 4, 4, 
    4, 47, 4, 4, 4, 4, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, 4, 4, 4, 4, 4, 
    4, 4, 4, 4, -1, -1, -1, -1, -1, -1, 
    4, 4, 4, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, 48, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, 49, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, 50, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, 11, 11, 11, 11, 11, 11, 11, 11, 11, 
    11, 11, 11, 11, 11, 11, 51, 11, 11, 11, 
    52, 11, 11, 11, 11, 11, 11, 11, 11, 11, 
    11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 
    11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 
    11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 
    11, 11, -1, -1, -1, -1, -1, 4, 4, 4, 
    -1, 4, 4, 4, 53, -1, -1, -1, 4, 4, 
    -1, -1, 4, 4, 4, 54, 4, 55, 4, 4, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    56, 4, 4, 4, 4, 57, 4, 4, -1, -1, 
    -1, -1, -1, -1, 4, 58, 4, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, 4, 4, 
    4, -1, 4, 4, 4, 4, -1, -1, -1, 4, 
    4, -1, -1, 4, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    4, 4, 4, 4, 4, 59, 4, 4, 4, -1, 
    -1, -1, -1, -1, -1, 4, 4, 4, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    4, 4, -1, 4, 4, 4, 4, -1, -1, -1, 
    4, 4, -1, -1, 4, 4, 4, 4, 4, 4, 
    4, 4, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, 4, 4, 4, 4, 4, 4, 4, 60, 4, 
    -1, -1, -1, -1, -1, -1, 4, 4, 4, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    4, 4, 4, -1, 4, 4, 4, 4, -1, -1, 
    -1, 4, 4, -1, -1, 4, 4, 4, 4, 4, 
    4, 4, 4, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, 4, 4, 4, 4, 4, 4, 61, 4, 
    4, -1, -1, -1, -1, -1, -1, 4, 4, 4, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, 4, 4, 4, -1, 4, 4, 4, 62, -1, 
    -1, -1, 4, 4, -1, -1, 4, 4, 4, 4, 
    4, 4, 4, 4, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, 4, 4, 4, 4, 4, 4, 4, 
    4, 4, -1, -1, -1, -1, -1, -1, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, 4, 4, 4, -1, 4, 4, 4, 4, 
    -1, -1, -1, 4, 4, -1, -1, 4, 4, 4, 
    4, 63, 4, 4, 4, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, 4, 4, 4, 4, 4, 4, 
    4, 4, 4, -1, -1, -1, -1, -1, -1, 4, 
    4, 4, -1, -1, -1, -1, -1, -1, 18, 18, 
    18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
    18, 18, 18, 64, 18, 18, 18, 18, 18, 18, 
    18, 18, 18, 18, 18, 18, 65, 18, 18, 18, 
    18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
    18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
    18, 18, 18, 18, 18, 18, 18, 18, 18, 66, 
    66, 66, 66, -1, 66, 66, 66, 66, 66, 66, 
    66, 66, 66, 66, 67, 66, 66, 66, 66, 66, 
    66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 
    66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 
    66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 
    66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, 68, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, 69, 70, 71, -1, 
    -1, 72, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, 4, 4, 4, -1, 
    4, 4, 4, 4, -1, -1, -1, 4, 4, -1, 
    -1, 4, 4, 73, 74, 4, 4, 4, 4, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, 4, 4, 
    4, 4, 4, 4, 4, 4, 4, -1, -1, -1, 
    -1, -1, -1, 4, 4, 4, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, 4, 4, 4, 
    -1, 4, 4, 4, 4, -1, -1, -1, 4, 4, 
    -1, -1, 4, 4, 4, 4, 4, 4, 4, 4, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    4, 4, 75, 4, 4, 4, 4, 4, -1, -1, 
    -1, -1, -1, -1, 4, 4, 4, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, 4, 4, 
    4, -1, 4, 4, 4, 4, -1, -1, -1, 4, 
    4, -1, -1, 4, 4, 76, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, -1, 
    -1, -1, -1, -1, -1, 4, 4, 4, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    4, 4, -1, 4, 4, 4, 4, -1, -1, -1, 
    4, 4, -1, -1, 4, 4, 77, 4, 78, 4, 
    4, 4, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    -1, -1, -1, -1, -1, -1, 4, 4, 4, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    79, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, 80, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, 81, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, 82, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    83, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, 84, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, 85, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, 86, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, 87, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, 4, 4, 4, -1, 4, 
    4, 4, 4, -1, -1, -1, 4, 4, -1, -1, 
    4, 4, 4, 4, 4, 4, 4, 4, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, 4, 4, 4, 
    4, 4, 4, 88, 4, 4, -1, -1, -1, -1, 
    -1, -1, 4, 4, 4, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 89, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 90, 
    44, -1, -1, -1, -1, -1, 45, -1, 90, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    91, -1, 91, 91, 91, 91, -1, -1, -1, 91, 
    -1, -1, -1, 91, 91, 91, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, 91, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, 92, -1, -1, -1, -1, -1, -1, -1, -1, 
    92, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    4, 4, 4, -1, 4, 4, 4, 4, -1, -1, 
    -1, 4, 4, -1, -1, 4, 4, 4, 4, 4, 
    93, 94, 4, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, 4, 4, 4, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, 4, 4, 4, -1, 4, 4, 4, 4, -1, 
    -1, -1, 4, 4, -1, -1, 4, 95, 4, 4, 
    4, 4, 4, 4, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, 4, 4, 4, 4, 4, 4, 4, 
    4, 4, -1, -1, -1, -1, -1, -1, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, 96, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, 11, 11, 
    11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 
    11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 
    11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 
    11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 
    11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 
    11, 11, 11, 11, 11, 11, 11, 11, 11, -1, 
    -1, -1, -1, -1, 4, 4, 4, -1, 4, 4, 
    4, 4, -1, -1, -1, 4, 4, -1, -1, 4, 
    4, 4, 4, 4, 4, 4, 4, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, 4, 4, 4, 4, 
    97, 4, 4, 4, 4, -1, -1, -1, -1, -1, 
    -1, 4, 4, 4, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, 4, 4, 4, -1, 4, 
    4, 4, 4, -1, -1, -1, 4, 4, -1, -1, 
    4, 4, 4, 4, 4, 4, 4, 4, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, 4, 4, 4, 
    4, 4, 4, 98, 4, 4, -1, -1, -1, -1, 
    -1, -1, 4, 4, 4, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, 4, 4, 4, -1, 
    4, 4, 4, 4, -1, -1, -1, 4, 4, -1, 
    -1, 4, 4, 4, 4, 99, 4, 4, 4, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, 4, 4, 
    4, 4, 4, 4, 4, 4, 4, -1, -1, -1, 
    -1, -1, -1, 4, 4, 100, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, 4, 4, 4, 
    -1, 4, 4, 4, 4, -1, -1, -1, 4, 4, 
    -1, -1, 4, 4, 4, 101, 4, 4, 4, 4, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, -1, -1, 
    -1, -1, -1, -1, 4, 4, 4, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, 4, 4, 
    4, -1, 4, 4, 4, 4, -1, -1, -1, 4, 
    4, -1, -1, 4, 4, 4, 4, 102, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, -1, 
    -1, -1, -1, -1, -1, 4, 4, 4, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    4, 4, -1, 4, 4, 4, 4, -1, -1, -1, 
    4, 4, -1, -1, 4, 4, 4, 4, 4, 4, 
    4, 4, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, 4, 4, 4, 4, 4, 4, 103, 4, 4, 
    -1, -1, -1, -1, -1, -1, 4, 4, 4, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    4, 4, 4, -1, 4, 4, 4, 4, -1, -1, 
    -1, 4, 4, -1, -1, 4, 4, 4, 4, 4, 
    4, 4, 104, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, 4, 4, 4, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, 4, 4, 4, -1, 4, 4, 4, 4, -1, 
    -1, -1, 4, 4, -1, -1, 4, 4, 4, 105, 
    4, 4, 4, 4, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, 4, 4, 4, 4, 4, 4, 4, 
    4, 4, -1, -1, -1, -1, -1, -1, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, 4, 4, 4, -1, 4, 4, 4, 4, 
    -1, -1, -1, 4, 4, -1, -1, 4, 4, 4, 
    4, 4, 4, 106, 4, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, 4, 4, 4, 4, 4, 4, 
    4, 4, 4, -1, -1, -1, -1, -1, -1, 4, 
    4, 4, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, 4, 4, 4, -1, 4, 107, 4, 
    4, -1, -1, -1, 4, 4, -1, -1, 4, 4, 
    4, 4, 4, 4, 4, 4, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, 4, 4, 4, 4, 4, 
    4, 4, 4, 4, -1, -1, -1, -1, -1, -1, 
    108, 4, 4, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, 4, 4, 4, -1, 4, 4, 
    4, 4, -1, -1, -1, 4, 4, -1, -1, 4, 
    4, 4, 4, 4, 4, 4, 4, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, 4, 4, 4, 4, 
    4, 4, 4, 4, 109, -1, -1, -1, -1, -1, 
    -1, 4, 4, 4, -1, -1, -1, -1, -1, -1, 
    -1, -1, 18, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, 18, -1, 18, 18, 18, -1, 110, 18, 
    18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
    18, 18, 18, 18, 18, 18, 18, 18, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, 66, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, 66, -1, 66, 66, 111, -1, 112, 
    66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 
    66, 66, 66, 66, 66, 66, 66, 66, 66, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, 113, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, 114, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    4, 4, -1, 4, 4, 4, 4, -1, -1, -1, 
    4, 4, -1, -1, 4, 4, 4, 4, 4, 4, 
    115, 4, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    -1, -1, -1, -1, -1, -1, 4, 4, 4, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    4, 4, 4, -1, 4, 4, 4, 4, -1, -1, 
    -1, 4, 4, -1, -1, 4, 116, 4, 4, 4, 
    4, 4, 4, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, 4, 4, 4, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, 4, 4, 4, -1, 4, 4, 4, 117, -1, 
    -1, -1, 4, 4, -1, -1, 4, 4, 4, 4, 
    4, 4, 4, 4, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, 4, 4, 4, 4, 4, 4, 4, 
    4, 4, -1, -1, -1, -1, -1, -1, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, 4, 4, 4, -1, 4, 4, 4, 118, 
    -1, -1, -1, 4, 4, -1, -1, 4, 4, 4, 
    4, 4, 4, 4, 4, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, 4, 4, 4, 4, 4, 4, 
    4, 4, 4, -1, -1, -1, -1, -1, -1, 4, 
    4, 4, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, 4, 4, 4, -1, 4, 4, 4, 
    4, -1, -1, -1, 4, 4, -1, -1, 4, 4, 
    4, 4, 119, 4, 4, 4, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, 4, 4, 4, 4, 4, 
    4, 4, 4, 4, -1, -1, -1, -1, -1, -1, 
    4, 4, 4, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, 90, -1, -1, -1, 
    -1, -1, -1, 45, -1, 90, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, 92, -1, -1, 
    -1, 120, 120, -1, -1, -1, 92, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, 4, 4, 4, -1, 
    4, 4, 4, 121, -1, -1, -1, 4, 4, -1, 
    -1, 4, 4, 4, 4, 4, 4, 4, 4, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, 4, 4, 
    4, 4, 4, 4, 4, 4, 4, -1, -1, -1, 
    -1, -1, -1, 4, 4, 4, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, 4, 4, 4, 
    -1, 4, 122, 4, 4, -1, -1, -1, 4, 4, 
    -1, -1, 4, 4, 4, 4, 4, 4, 4, 4, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, -1, -1, 
    -1, -1, -1, -1, 4, 4, 4, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, 4, 4, 
    4, -1, 4, 4, 4, 4, -1, -1, -1, 4, 
    4, -1, -1, 4, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    4, 4, 4, 4, 4, 123, 4, 4, 4, -1, 
    -1, -1, -1, -1, -1, 4, 4, 4, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    4, 4, -1, 4, 4, 4, 4, -1, -1, -1, 
    4, 4, -1, -1, 4, 4, 4, 4, 4, 4, 
    124, 4, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    -1, -1, -1, -1, -1, -1, 4, 4, 4, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    4, 4, 4, -1, 4, 4, 4, 4, -1, -1, 
    -1, 4, 4, -1, -1, 4, 125, 4, 4, 4, 
    4, 4, 4, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, 4, 4, 4, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, 4, 4, 4, -1, 4, 4, 4, 4, -1, 
    -1, -1, 4, 4, -1, -1, 4, 4, 4, 4, 
    126, 4, 4, 4, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, 4, 4, 4, 4, 4, 4, 4, 
    4, 4, -1, -1, -1, -1, -1, -1, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, 4, 4, 4, -1, 4, 4, 4, 127, 
    -1, -1, -1, 4, 4, -1, -1, 4, 4, 4, 
    4, 4, 4, 4, 4, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, 4, 4, 4, 4, 4, 4, 
    4, 4, 4, -1, -1, -1, -1, -1, -1, 4, 
    4, 4, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, 18, -1, -1, -1, 18, -1, 18, 
    -1, -1, -1, 18, -1, 18, 18, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, 18, -1, 18, 
    -1, -1, -1, -1, -1, 18, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, 128, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, 66, -1, -1, -1, 66, 
    -1, 66, -1, -1, -1, 66, -1, 66, 66, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 66, 
    -1, 66, -1, -1, -1, -1, -1, 66, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, 4, 4, 4, -1, 
    4, 4, 4, 129, -1, -1, -1, 4, 4, -1, 
    -1, 4, 4, 4, 4, 4, 4, 4, 4, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, 4, 4, 
    4, 4, 4, 4, 4, 4, 4, -1, -1, -1, 
    -1, -1, -1, 4, 4, 4, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, 4, 4, 4, 
    -1, 4, 4, 4, 4, -1, -1, -1, 4, 4, 
    -1, -1, 4, 4, 4, 4, 4, 4, 4, 4, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    130, 4, 4, 4, 4, 4, 4, 4, -1, -1, 
    -1, -1, -1, -1, 4, 4, 4, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, 4, 4, 
    4, -1, 4, 4, 4, 4, -1, -1, -1, 4, 
    4, -1, -1, 4, 4, 4, 131, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, -1, 
    -1, -1, -1, -1, -1, 4, 4, 4, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    4, 4, -1, 4, 4, 4, 4, -1, -1, -1, 
    4, 4, -1, -1, 4, 4, 4, 4, 4, 4, 
    4, 4, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    -1, -1, -1, -1, -1, -1, 4, 4, 132, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, 133, -1, -1, -1, -1, -1, 134, -1, 
    -1, 133, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, 134, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, 4, 4, 4, -1, 4, 4, 4, 4, -1, 
    -1, -1, 4, 4, -1, -1, 4, 4, 4, 4, 
    4, 4, 4, 4, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, 4, 4, 4, 135, 4, 4, 4, 
    4, 4, -1, -1, -1, -1, -1, -1, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, 4, 4, 4, -1, 4, 4, 4, 4, 
    -1, -1, -1, 4, 4, -1, -1, 4, 4, 4, 
    136, 4, 4, 4, 4, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, 4, 4, 4, 4, 4, 4, 
    4, 4, 4, -1, -1, -1, -1, -1, -1, 4, 
    4, 4, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, 4, 4, 4, -1, 4, 4, 4, 
    4, -1, -1, -1, 4, 4, -1, -1, 4, 4, 
    4, 4, 4, 4, 4, 4, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, 4, 4, 4, 4, 4, 
    137, 4, 4, 4, -1, -1, -1, -1, -1, -1, 
    4, 4, 4, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, 66, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, 4, 4, 4, -1, 4, 
    4, 4, 4, -1, -1, -1, 4, 4, -1, -1, 
    4, 4, 4, 4, 138, 4, 4, 4, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, 4, 4, 4, 
    4, 4, 4, 4, 4, 4, -1, -1, -1, -1, 
    -1, -1, 4, 4, 4, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, 4, 4, 4, -1, 
    4, 4, 4, 4, -1, -1, -1, 4, 4, -1, 
    -1, 4, 4, 4, 4, 4, 4, 4, 4, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, 4, 4, 
    4, 4, 4, 4, 4, 4, 4, -1, -1, -1, 
    -1, -1, -1, 4, 4, 139, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, 4, 4, 4, 
    -1, 4, 4, 4, 4, -1, -1, -1, 4, 4, 
    -1, -1, 4, 4, 4, 4, 4, 140, 4, 4, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, -1, -1, 
    -1, -1, -1, -1, 4, 4, 4, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    133, -1, -1, -1, -1, -1, -1, -1, -1, 133, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    4, 4, -1, 4, 4, 4, 4, -1, -1, -1, 
    4, 4, -1, -1, 4, 4, 4, 4, 4, 4, 
    4, 141, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    -1, -1, -1, -1, -1, -1, 4, 4, 4, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    4, 4, 4, -1, 4, 4, 4, 4, -1, -1, 
    -1, 4, 4, -1, -1, 4, 4, 4, 4, 4, 
    142, 4, 4, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, 4, 4, 4, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, 4, 4, 4, -1, 4, 4, 4, 143, -1, 
    -1, -1, 4, 4, -1, -1, 4, 4, 4, 4, 
    4, 4, 4, 4, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, 4, 4, 4, 4, 4, 4, 4, 
    4, 4, -1, -1, -1, -1, -1, -1, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, 4, 4, 4, -1, 4, 4, 4, 144, 
    -1, -1, -1, 4, 4, -1, -1, 4, 4, 4, 
    4, 4, 4, 4, 4, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, 4, 4, 4, 4, 4, 4, 
    4, 4, 4, -1, -1, -1, -1, -1, -1, 4, 
    4, 4, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, 4, 4, 4, -1, 4, 4, 4, 
    4, -1, -1, -1, 4, 4, -1, -1, 4, 4, 
    4, 4, 4, 4, 4, 4, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, 4, 4, 4, 4, 4, 
    4, 145, 4, 4, -1, -1, -1, -1, -1, -1, 
    4, 4, 4, -1, -1, -1, -1, -1, -1, 
  };

  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\5\1\1\11\4\1\1\0\6\1\1\0\4\11"+
    "\2\1\1\11\10\1\1\11\2\1\3\11\1\1\2\11"+
    "\1\1\2\0\2\1\2\11\1\1\1\0\1\11\13\1"+
    "\1\0\2\11\1\1\1\11\1\0\2\11\1\0\6\1"+
    "\11\11\1\1\1\11\6\1\1\11\15\1\1\0\1\1"+
    "\1\0\2\11\5\1\1\0\15\1\1\0\13\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[146];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */


  private StringBuilder comment = null;


  private boolean commentnl = false;


  private String fileName = null;


  public void setFileName(String fileName) {
    this.fileName = fileName;
  }




  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ErlangLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public ErlangLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader
             (in, java.nio.charset.Charset.forName("UTF-8")));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 142) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

    // numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Syntax _next() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { return new Layout(yytext(), false);
          }
        case 73: break;
        case 2: 
          { Text<ErlangTag> syntax = new Text<ErlangTag>(ErlangTag.VAR, yytext()); syntax.setLocation(new Location(fileName, yyline+1, yycolumn)); return syntax;
          }
        case 74: break;
        case 3: 
          { Text<ErlangTag> syntax = new Text<ErlangTag>(ErlangTag.ATOM, yytext()); syntax.setLocation(new Location(fileName, yyline+1, yycolumn)); return syntax;
          }
        case 75: break;
        case 4: 
          { Text<ErlangTag> syntax = new Text<ErlangTag>(ErlangTag.INTEGER, yytext()); syntax.setLocation(new Location(fileName, yyline+1, yycolumn)); return syntax;
          }
        case 76: break;
        case 5: 
          { Language<ErlangTag> syntax = new Language<ErlangTag>(ErlangTag.RADIX); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 77: break;
        case 6: 
          { Language<ErlangTag> syntax = new Language<ErlangTag>(ErlangTag.OP_MINUS); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 78: break;
        case 7: 
          { Language<ErlangTag> syntax = new Language<ErlangTag>(ErlangTag.DOT); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 79: break;
        case 8: 
          { Language<ErlangTag> syntax = new Language<ErlangTag>(ErlangTag.BRACKET_LEFT); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 80: break;
        case 9: 
          { Language<ErlangTag> syntax = new Language<ErlangTag>(ErlangTag.CURLY_LEFT); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 81: break;
        case 10: 
          { Language<ErlangTag> syntax = new Language<ErlangTag>(ErlangTag.BRACKET_RIGHT); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 82: break;
        case 11: 
          { Language<ErlangTag> syntax = new Language<ErlangTag>(ErlangTag.CURLY_RIGHT); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 83: break;
        case 12: 
          { Text<ErlangTag> syntax = new Text<ErlangTag>(ErlangTag.CHAR, yytext()); syntax.setLocation(new Location(fileName, yyline+1, yycolumn)); return syntax;
          }
        case 84: break;
        case 13: 
          { Language<ErlangTag> syntax = new Language<ErlangTag>(ErlangTag.OP_EQ); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 85: break;
        case 14: 
          { Language<ErlangTag> syntax = new Language<ErlangTag>(ErlangTag.COMMA); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 86: break;
        case 15: 
          { Language<ErlangTag> syntax = new Language<ErlangTag>(ErlangTag.COLON); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 87: break;
        case 16: 
          { Language<ErlangTag> syntax = new Language<ErlangTag>(ErlangTag.OP_GT); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 88: break;
        case 17: 
          { Language<ErlangTag> syntax = new Language<ErlangTag>(ErlangTag.OP_LT); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 89: break;
        case 18: 
          { Language<ErlangTag> syntax = new Language<ErlangTag>(ErlangTag.OP_PLUS); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 90: break;
        case 19: 
          { Language<ErlangTag> syntax = new Language<ErlangTag>(ErlangTag.OP_AR_MUL); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 91: break;
        case 20: 
          { Language<ErlangTag> syntax = new Language<ErlangTag>(ErlangTag.OP_AR_DIV); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 92: break;
        case 21: 
          { Language<ErlangTag> syntax = new Language<ErlangTag>(ErlangTag.OP_EXL); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 93: break;
        case 22: 
          { Language<ErlangTag> syntax = new Language<ErlangTag>(ErlangTag.PAR_LEFT); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 94: break;
        case 23: 
          { Language<ErlangTag> syntax = new Language<ErlangTag>(ErlangTag.PAR_RIGHT); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 95: break;
        case 24: 
          { Language<ErlangTag> syntax = new Language<ErlangTag>(ErlangTag.OP_OR); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 96: break;
        case 25: 
          { Language<ErlangTag> syntax = new Language<ErlangTag>(ErlangTag.SEMI); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 97: break;
        case 26: 
          { Language<ErlangTag> syntax = new Language<ErlangTag>(ErlangTag.QMARK); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 98: break;
        case 27: 
          { Language<ErlangTag> syntax = new Language<ErlangTag>(ErlangTag.OP_MINUS_MINUS); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 99: break;
        case 28: 
          { Language<ErlangTag> syntax = new Language<ErlangTag>(ErlangTag.ARROW); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 100: break;
        case 29: 
          { Language<ErlangTag> syntax = new Language<ErlangTag>(ErlangTag.DOT_DOT); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 101: break;
        case 30: 
          { Text<ErlangTag> syntax = new Text<ErlangTag>(ErlangTag.STRING, yytext()); syntax.setLocation(new Location(fileName, yyline+1, yycolumn)); return syntax;
          }
        case 102: break;
        case 31: 
          { Language<ErlangTag> syntax = new Language<ErlangTag>(ErlangTag.OP_EQ_EQ); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 103: break;
        case 32: 
          { Language<ErlangTag> syntax = new Language<ErlangTag>(ErlangTag.ASSOC); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 104: break;
        case 33: 
          { Language<ErlangTag> syntax = new Language<ErlangTag>(ErlangTag.OP_EQ_LT); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 105: break;
        case 34: 
          { Language<ErlangTag> syntax = new Language<ErlangTag>(ErlangTag.IF); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 106: break;
        case 35: 
          { Language<ErlangTag> syntax = new Language<ErlangTag>(ErlangTag.OF); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 107: break;
        case 36: 
          { Language<ErlangTag> syntax = new Language<ErlangTag>(ErlangTag.OR); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 108: break;
        case 37: 
          { Language<ErlangTag> syntax = new Language<ErlangTag>(ErlangTag.MATCH); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 109: break;
        case 38: 
          { Language<ErlangTag> syntax = new Language<ErlangTag>(ErlangTag.COLON_COLON); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 110: break;
        case 39: 
          { Language<ErlangTag> syntax = new Language<ErlangTag>(ErlangTag.OP_GT_EQ); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 111: break;
        case 40: 
          { Language<ErlangTag> syntax = new Language<ErlangTag>(ErlangTag.BIN_END); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 112: break;
        case 41: 
          { Language<ErlangTag> syntax = new Language<ErlangTag>(ErlangTag.OP_LT_MINUS); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 113: break;
        case 42: 
          { Language<ErlangTag> syntax = new Language<ErlangTag>(ErlangTag.OP_LT_EQ); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 114: break;
        case 43: 
          { Language<ErlangTag> syntax = new Language<ErlangTag>(ErlangTag.BIN_START); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 115: break;
        case 44: 
          { Language<ErlangTag> syntax = new Language<ErlangTag>(ErlangTag.OP_PLUS_PLUS); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 116: break;
        case 45: 
          { Language<ErlangTag> syntax = new Language<ErlangTag>(ErlangTag.OP_DIV_EQ); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 117: break;
        case 46: 
          { Language<ErlangTag> syntax = new Language<ErlangTag>(ErlangTag.OR_OR); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 118: break;
        case 47: 
          { Text<ErlangTag> syntax = new Text<ErlangTag>(ErlangTag.FLOAT, yytext()); syntax.setLocation(new Location(fileName, yyline+1, yycolumn)); return syntax;
          }
        case 119: break;
        case 48: 
          { Language<ErlangTag> syntax = new Language<ErlangTag>(ErlangTag.END); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 120: break;
        case 49: 
          { Language<ErlangTag> syntax = new Language<ErlangTag>(ErlangTag.DOT_DOT_DOT); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 121: break;
        case 50: 
          { Language<ErlangTag> syntax = new Language<ErlangTag>(ErlangTag.BSR); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 122: break;
        case 51: 
          { Language<ErlangTag> syntax = new Language<ErlangTag>(ErlangTag.BSL); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 123: break;
        case 52: 
          { Language<ErlangTag> syntax = new Language<ErlangTag>(ErlangTag.BOR); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 124: break;
        case 53: 
          { Language<ErlangTag> syntax = new Language<ErlangTag>(ErlangTag.DIV); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 125: break;
        case 54: 
          { Language<ErlangTag> syntax = new Language<ErlangTag>(ErlangTag.FUN); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 126: break;
        case 55: 
          { Language<ErlangTag> syntax = new Language<ErlangTag>(ErlangTag.NOT); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 127: break;
        case 56: 
          { Language<ErlangTag> syntax = new Language<ErlangTag>(ErlangTag.REM); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 128: break;
        case 57: 
          { Language<ErlangTag> syntax = new Language<ErlangTag>(ErlangTag.TRY); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 129: break;
        case 58: 
          { Language<ErlangTag> syntax = new Language<ErlangTag>(ErlangTag.OP_EQ_COL_EQ); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 130: break;
        case 59: 
          { Language<ErlangTag> syntax = new Language<ErlangTag>(ErlangTag.OP_EQ_DIV_EQ); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 131: break;
        case 60: 
          { Language<ErlangTag> syntax = new Language<ErlangTag>(ErlangTag.AND); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 132: break;
        case 61: 
          { Language<ErlangTag> syntax = new Language<ErlangTag>(ErlangTag.XOR); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 133: break;
        case 62: 
          { Language<ErlangTag> syntax = new Language<ErlangTag>(ErlangTag.CASE); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 134: break;
        case 63: 
          { Language<ErlangTag> syntax = new Language<ErlangTag>(ErlangTag.BNOT); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 135: break;
        case 64: 
          { Language<ErlangTag> syntax = new Language<ErlangTag>(ErlangTag.BAND); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 136: break;
        case 65: 
          { Language<ErlangTag> syntax = new Language<ErlangTag>(ErlangTag.BXOR); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 137: break;
        case 66: 
          { Language<ErlangTag> syntax = new Language<ErlangTag>(ErlangTag.WHEN); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 138: break;
        case 67: 
          { Language<ErlangTag> syntax = new Language<ErlangTag>(ErlangTag.CATCH); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 139: break;
        case 68: 
          { Language<ErlangTag> syntax = new Language<ErlangTag>(ErlangTag.BEGIN); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 140: break;
        case 69: 
          { Language<ErlangTag> syntax = new Language<ErlangTag>(ErlangTag.AFTER); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 141: break;
        case 70: 
          { Language<ErlangTag> syntax = new Language<ErlangTag>(ErlangTag.ORELSE); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 142: break;
        case 71: 
          { Language<ErlangTag> syntax = new Language<ErlangTag>(ErlangTag.RECEIVE); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 143: break;
        case 72: 
          { Language<ErlangTag> syntax = new Language<ErlangTag>(ErlangTag.ANDALSO); syntax.setLocation(new Location(fileName, yyline+1, yycolumn+1)); return syntax;
          }
        case 144: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
