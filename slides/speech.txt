1. Здравствуйте, уважаемая аттестационная комммиссия. Меня зовут Савенко Сергей, тема моей работы - синтаксический анализ исходного кода, содержащего инструкции препроцессора. Научный руководитель - Игнатов Сергей Сергеевич.

Вместе со многими языками программирования применяются текстовые препроцессоры, позволяющие повысить выразительность языка программирования за счёт текстовой подстановки файлов, использования макроопределений и условной компиляции.

2. Однако, использование препроцессора приводит к тому, что в одном файле с исходным кодом находится сразу несколько вариантов исходного кода на языке программирования, некоторые из которых могут содержать ошибки.

Это приводит к необходимости интерпретации инструкций препроцессора в различных средствах обработки исходного кода - таких, как средства автоматического поиска ошибок, инструменты рефакторинга, браузеры кода и многих других. Для этого требуется разработать синтаксический анализатор, позволяющий строить синтаксические деревья для всех возможных конфигураций препроцессора. Однако, разработка такого синтаксического анализатора является достаточно трудоёмкой задачей.

3. Целью настоящей работы является создание инструмента, позволяющего производить синтаксический анализ непрепроцессированного кода, используя грамматику языка программирования и интерпретатор инструкций препроцессора.

Для достижения этой цели были поставлены задачи изучения существующих решений, разработки и реализации алгоритма синтаксического анализа непрепроцессированного кода, и сравнения разработанного решения с аналогами.

4. Наиболее известными из существующих решений, позволяющих производить синтаксический анализ непрепроцессированного исходного кода, являются проекты SuperC и TypeChef. Оба этих проекта изначально предназначены для разбора языка С, однако предоставляют возможность описания синтаксических анализаторов и для других языков.

Авторы SuperC предлагают использовать специальным образом проаннотированные грамматики для парсер-генератора Bison для генерации LR-анализатора, который впоследствии используется для обработки разных ветвей условной компиляции. Авторы TypeChef предлагают описать грамматику целевого языка при помощи их библиотеки парсер-комбинаторов. Оба решения имеют сложности, связанные с их использованием, о которых будет сказано далее.

5. Оба этих проекта используют один и тот же подход к разбору непрепроцессированного кода. Этот же подход был применен в данной работе.

Подход состоит из двух этапов: 

Cначала производится препроцессирование, при котором сохраняется информация об узлах условного ветвления. Результатом этого этапа является направленный ориентированный граф последовательностей лексем для всех ветвей условной компиляции.

На втором этапе производится синтаксический анализ, при котором строится синтаксическое дерево, содержащее кроме обыкновенных узлов синтаксического дерева, узлы условного ветвления.

Для реализации второго этапа в данной работе был разработан алгоритм, основанный на алгоритме синтаксического анализа Earley.

6. Алгоритм Earley работает следующим образом: для каждой входной лексемы последовательно строятся состояния - множества элементов Earley, представляющих собой пару из продукции грамматики с точкой, соответствующей текущему месту разбора правила, и номера состояния, в котором был начат разбор этого правила. Дополнительно с каждым элементом Earley ассоциировано множество пар элементов-предшественников и условий наличия. Эта информация используется для восстановления дерева разбора после завершения распознавания входной последовательности. В случае, если вместо следующей лексемы на входе оказывается точка условного ветвления, каждая ветвь обрабатывается отдельно и последние состояния каждой из ветвей условной компиляции объединяются в одно, которое используется для продолжения работы алгоритма.

Этот алгоритм был реализован в библиотеке, разработанной в рамках этой работы.

7. Для сравнения синтаксических анализаторов, разработаанных при помощи решения, полученного в этой работе, и при помощи парсер-комбинаторов из проекта TypeChef, было использовано некоторое подмножество языка Erlang.

Результатом этого сравнения стало следующее:

Разработанное решение позволяет удобно описывать целевой язык программирования, не требуя модификаций грамматики языка, избавляя пользователя от необходимости указания точек ветвления и слияния подпарсеров, в то же время обладая более лаконичным синтаксисом - потребовалось около двух раз меньше строк исходного кода. Синтаксический анализатор, описанный при помощи разработанной библиотеки также показал себя более быстрым при проверке на тестовых данных.

8. В рамках настоящей работы был разработан алгоритм синтаксического анализа, поддерживающий обработку ветвей условной компиляции. Этот алгоритм был использован для создания инстумента для создания синтаксических анализаторов исходного кода, содержащего инструкции препроцессора.

Разработанное решение обладает следующими особенностями:

описание языка состоит в переписывании правил грамматики, описанных в БНФ, на предметно-ориентированном языке, предоставляемом библиотекой,

Не требуется описание мест ветления и слияения подпарсеров.

Решение поддерживает более широкий класс языков, чем аналоги, при этом обладая сравнимой с ними производительностью. 
